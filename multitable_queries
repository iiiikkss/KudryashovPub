#1 Вывести все имена и фамилии студентов, и название хобби, которым занимается этот студент.

Select st.surname, st.name, h.name
from students st
inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id

#2 Вывести информацию о студенте, занимающимся хобби самое продолжительное время.

Select st.*, sh.date_start
from students st
inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
where sh.date_finish is null
group by st.id, sh.date_start
order by sh.date_start asc limit 1

#3 Вывести имя, фамилию, номер зачетки и дату рождения для студентов, средний балл которых выше среднего, а сумма риска всех хобби, которыми он занимается в данный момент, больше 0.9.

select st.surname, st.name, st.birth_date, avg(st.score), sum(h.risk)
from students st
inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
where sh.date_finish is null
group by st.surname, st.name, st.birth_date, st.score
having st.score > (select avg(st.score) from students st) and sum(h.risk)>0.9

#4 Вывести фамилию, имя, зачетку, дату рождения, название хобби и длительность в месяцах, для всех завершенных хобби.

select st.surname, st.name, st.birth_date, h.name,
extract (year from age(sh.date_finish, sh.date_start)) * 12
+ extract(month from age(sh.date_finish, sh.date_start))
from students st
inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
where sh.date_finish is not null
group by st.surname, st.name, st.birth_date, h.name, sh.date_finish, sh.date_start

#5 Вывести фамилию, имя, зачетку, дату рождения студентов, которым исполнилось N полных лет на текущую дату, и которые имеют более 1 действующего хобби.

#6 Найти средний балл в каждой группе, учитывая только баллы студентов, которые имеют хотя бы одно действующее хобби.

Select st.n_group, avg(st.score) as avg_st
from students st
inner join students_hobbies sh
on st.id = sh.student_id
where sh.date_finish is null
group by st.n_group
order by st.n_group asc


#7/*Найти название, риск, длительность в месяцах самого продолжительного хобби из действующих, указав номер зачетки студента и номер его группы.
Select h.name, h.risk, extract (year from age(now()::date, sh.date_start)) * 12
					   + extract(month from age(now()::date, sh.date_start)) as length_hobby, st.n_group
from hobbies h inner join students_hobbies sh
on h.id = sh.hobby_id
inner join students st
on sh.student_id = st.id
where (sh.date_finish is null)
Order by sh.date_start asc

#8/*Найти все хобби, которыми увлекаются студенты, имеющие максимальный балл.
SELECT st.n_group, st.name,st.surname, h.name
FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
WHERE sh.date_finish is not Null
Group by st.n_group, st.name, h.name, st.surname
*/
#9/*Найти все действующие хобби, которыми увлекаются (троечники) хорошисты 2-го курса.
SELECT DISTINCT h.name
FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
WHERE st.n_group::varchar LIKE '2%' 
  and st.score < 4.5
  and sh.date_finish is null


#10 Найти номера курсов, на которых более 50% студентов имеют более одного действующего хобби.

select *
from (select substr (st.n_group::varchar, 1,1) as cours, count(*)::decimal as c
from students st
group by substr (st.n_group::varchar, 1,1))as st_all
inner join (select substr (st.n_group::varchar, 1,1) as cours, count(*)::decimal as c
from students st
inner join students_hobbies sh
on st.id = sh.student_id
where sh.date_finish is null
group by substr (st.n_group::varchar, 1,1)
having count(*)> 1) as sn_2
on st_all.cours = sn_2.cours
where sn_2.c / st_all.c > 0.38


#10 (групповые) Аналогично 9 заданию, но вывести в одном запросе для каждой группы студента с максимальным баллом.
select *
From students st
inner join ( select st.n_group, max(st.score) as m
from students st
group by st.n_group ) t
on st.n_group = t.n_group and st.score = t.m

/*Вывести номера групп, в которых не менее 60% студентов имеют балл не ниже 4.
Для каждого курса подсчитать количество различных действующих хобби на курсе.
Вывести номер зачётки, фамилию и имя, дату рождения и номер курса для всех отличников, не имеющих хобби. Отсортировать данные по возрастанию в пределах курса по убыванию даты рождения.
Select st.name,st.surname,st.birth_date,st.score
FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
where sh.date_finish is not null
and score>=4.5 
order by st.birth_date DESC
*/
/*Создать представление, в котором отображается вся информация о студентах, которые продолжают заниматься хобби в данный момент и занимаются им как минимум 5 лет.
Create view doing_hobby_5 as
Select st.*
FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
WHERE sh.date_finish is null and extract (year from age(now()::date, sh.date_start))>=5
*/
/*Для каждого хобби вывести количество людей, которые им занимаются.
select h.name, count(sh.student_id) as stud_on_hobby
from students_hobbies sh inner join hobbies h
on sh.hobby_id = h.id
group by hobby_id, h.name
order by stud_on_hobby desc
*/
/*Вывести ИД самого популярного хобби.
select h.id as most_popular_hobby_id 
from students_hobbies sh inner join hobbies h
on sh.hobby_id = h.id
group by h.id
order by count(sh.student_id)  desc
limit 1
*/
/*Вывести всю информацию о студентах, занимающихся самым популярным хобби.
*/Select h.name, h.risk,st.name,st.n_group,extract (year from age(now()::date, sh.date_start)) * 12
                       + extract(month from age(now()::date, sh.date_start)) as da
                       FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
order by da DESC limit 10

/*Вывести ИД 3х хобби с максимальным риском.
select h.risk as most_risk_hobby_id 
from hobbies h
order by risk desc
limit 3
*/
/*Вывести 10 студентов, которые занимаются одним (или несколькими) хобби самое продолжительно время.
*/Create or replace view num19 as  
Select h.name as hobby_name, h.risk,st.name as student_name,st.n_group,extract (year from age(now()::date, sh.date_start)) * 12
                       + extract(month from age(now()::date, sh.date_start)) as month_length
                       FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
order by month_length DESC
limit 10

/*Вывести номера групп (без повторений), в которых учатся студенты из предыдущего запроса.
select distinct n_group
from num19
*/
/*Создать представление, которое выводит номер зачетки, имя и фамилию студентов, отсортированных по убыванию среднего балла.
Create or replace view fio_stud as  
select name,surname
from students
order by score desc
*/
/*Представление: найти каждое популярное хобби на каждом курсе.
*/

/*Представление: найти хобби с максимальным риском среди самых популярных хобби на 2 курсе
select h.risk as most_popular_risk_hobby_id, h.name
FROM students st INNER JOIN students_hobbies sh
ON st.id = sh.student_id
INNER JOIN hobbies h
ON sh.hobby_id = h.id
WHERE st.n_group::varchar LIKE '2%'
order by risk desc
limit 1
*/